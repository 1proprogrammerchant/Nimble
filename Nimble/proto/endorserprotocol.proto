syntax = "proto3";

package endorserprotocol;

service EndorserCall {
  // Debug Endpoints
  rpc GetEndorserPublicKey(Empty) returns (EndorserPublicKey);
  rpc GetAllLedgers(Empty) returns (EndorserLedgerHandles);
  // Protocol Endpoints
  rpc NewEndorser(Empty) returns (EndorserStateResponse); // Early Start / Restart
  rpc NewLedger(Handle) returns (EndorserLedgerResponse);
  rpc ReadLatest(EndorserQuery) returns (EndorserQueryResponse);
  rpc AppendToLedger(EndorserAppendRequest) returns (EndorserAppendResponse);
}

message EndorserLedgerResponse {
  bytes signature = 1;
}

message EndorserLedgerHandles {
  repeated bytes handles = 1;
}

message EndorserStateResponse {
  string handle = 1;
  EndorserPublicKey keyinfo = 2;
}

message EndorserPublicKey {
  bytes publickey = 1;
  bytes signature = 2;
}

message Empty {

}

message EndorserAppendRequest {
  bytes endorser_handle = 1;
  bytes block_hash = 2;
  bytes conditional_tail_hash = 3;  // Ideally optional
}

message EndorserAppendResponse {
  bytes tail_hash = 1;
  uint64 ledger_height = 2;
  bytes signature = 3;
}

message Handle {
  bytes handle = 1;
}

message EndorserQuery {
  bytes handle = 1;
  bytes nonce = 2;
}

message EndorserQueryResponse {
  bytes nonce = 1;
  bytes tail_hash = 2;
  bytes signature = 3;
}